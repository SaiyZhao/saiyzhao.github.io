<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Weekly Review 2019-08-10</title>
      <link href="/2019/08/11/Weekly-Review-2019-08-10/"/>
      <url>/2019/08/11/Weekly-Review-2019-08-10/</url>
      
        <content type="html"><![CDATA[<p>这算是第一周的总结吧，其实用了两周了，效果不是很好，可以说是很不好，拖延症的状况完全没法控制。。。</p><p>录入task感觉有点混乱，对于Defer和Due的用法感觉还是有点像任务清单的用法，没有GTD思想那种随心所欲的感觉，这个问题要找一天好好的分析总结下了。</p><p>这周开始要好好治疗拖延症的问题了，这个问题已经影响到工作生活家庭的方方面面了。再不整治要出大问题了！</p><p>跟老婆要讨论的问题今天有一定要谈掉，不能再拖了。</p><p>希乐仑那边真不知道要怎么谈，哎，沟通能力太差了。</p><p>机票的事千万不能忘了~</p><p>就这样吧，希望下周能先把拖延症的问题解决掉一大半，人生新的开始就有期盼了。</p><p>房子的事情每天要花时间做了。月底之前不要看任何电影和剧了，是任何，这个事情一定要做到！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core 之动态WebApi</title>
      <link href="/2019/08/10/ASP-NET-Core-%E4%B9%8B%E5%8A%A8%E6%80%81WebApi/"/>
      <url>/2019/08/10/ASP-NET-Core-%E4%B9%8B%E5%8A%A8%E6%80%81WebApi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>接触到动态WebApi（Dynamic Web API）这个词已经有几年，是从ABP框架里面接触到的，当时尝试从ABP剥离出来作为独立组件来使用，可是后来因与ABP依赖太多而放弃。前不久朋友将这部分代码成功的从ABP中剥离出来并做了一个简单Demo扔给我，经过一些修改、添加功能、封装，现在已经能作为一个独立组件使用。</p><p>项目开源<strong>Gtihub</strong>: <a href="https://github.com/dotnetauth/Panda.DynamicWebApi" target="_blank" rel="noopener">https://github.com/dotnetauth/Panda.DynamicWebApi</a></p><p>本文只讲使用，不讲原理，原理放到后面的文章中详细介绍。</p><h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><p>不管是传统的三层架构、DDD经典四层架构（DDD Lite），亦或是其它具有应用逻辑层（业务逻辑层）的架构，在Web应用程序开发当中，我们的业务逻辑最终都需要经过Web Api来进行调用，这里我们可能会有一个重复的操作：编写业务逻辑 -&gt; 编写API调用业务逻辑，这种重复性的操作有没有办法解决呢？我们编写完业务逻辑后便自动生成WebApi，答案当然是有的。</p><p>本文的主角就是前面说过的：<strong>Panda.DynamicWebApi</strong></p><h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><p>这里以DDD经典四层架构中的应用逻辑层来讲解。</p><h5 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h5><p>（1）建立两个项目。一个是应用逻辑层类库项目，另一个是作为生成WebApi Host的ASP.NET Core WebApi项目。</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>（2）编写应用逻辑</p><p>定义一个逻辑接口，所有应用逻辑都应实现它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IApplicationService</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个学生管理逻辑接口，继承应用逻辑接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public interface IStudentAppService : IApplicationService</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 根据ID获取学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    StudentOutput Get(int id);</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取所有学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    List&lt;StudentOutput&gt; Get();</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 更新学生信息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt;</span><br><span class="line">    void Update(UpdateStudentInput input);</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 更新学生年龄</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;age&quot;&gt;&lt;/param&gt;</span><br><span class="line">    void UpdateAge(int age);</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 根据ID删除学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">    void Delete(int id);</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 添加学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt;</span><br><span class="line">    void Create(CreateStudentInput input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现学生逻辑管理接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class StudentAppService: IStudentAppService</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 根据ID获取学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    [HttpGet(&quot;&#123;id:int&#125;&quot;)]</span><br><span class="line">    public StudentOutput Get(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        return new StudentOutput() &#123;Id = 1, Age = 18, Name = &quot;张三&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取所有学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public List&lt;StudentOutput&gt; Get()</span><br><span class="line">    &#123;</span><br><span class="line">        return new List&lt;StudentOutput&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            new StudentOutput()&#123;Id = 1,Age = 18,Name = &quot;张三&quot;&#125;,</span><br><span class="line">            new StudentOutput()&#123;Id = 2,Age = 19,Name = &quot;李四&quot;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 更新学生信息</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt;</span><br><span class="line">    public void Update(UpdateStudentInput input)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 更新学生年龄</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;age&quot;&gt;&lt;/param&gt;</span><br><span class="line">    [HttpPatch(&quot;&#123;id:int&#125;/age&quot;)]</span><br><span class="line">    public void UpdateAge(int age)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 根据ID删除学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span><br><span class="line">    [HttpDelete(&quot;&#123;id:int&#125;&quot;)]</span><br><span class="line">    public void Delete(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 添加学生</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt;</span><br><span class="line">    public void Create(CreateStudentInput input)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）给WebApi Host项目配置Swagger。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Swashbuckle.AspNetCore -Version 4.0.1</span><br></pre></td></tr></table></figure><p>StartUp 中的配置（其中的两个XML文件不知道从哪里配置的，我是从csproj文件中直接修改的值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class="line">    services.AddSwaggerGen(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.SwaggerDoc(&quot;v1&quot;, new Info &#123; Title = &quot;晓晨学生管理系统 WebApi&quot;, Version = &quot;v1&quot; &#125;);</span><br><span class="line">        options.DocInclusionPredicate((docName, description) =&gt; true);  options.IncludeXmlComments(@&quot;bin\Debug\netcoreapp2.2\Xc.StuMgr.WebApiHost.xml&quot;);  options.IncludeXmlComments(@&quot;bin\Debug\netcoreapp2.2\Xc.StuMgr.Application.xml&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class="line">&#123;</span><br><span class="line">    if (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">    &#125;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI(c =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">       c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;晓晨学生管理系统 WebApi&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    app.UseMvc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、动态WebApi"><a href="#2、动态WebApi" class="headerlink" title="2、动态WebApi"></a>2、动态WebApi</h5><p>通过Nuget为Application项目安装组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Panda.DynamicWebApi</span><br></pre></td></tr></table></figure><p>为接口IApplicationService继承IDynamicWebApi同时添加特性DynamicWebApi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[DynamicWebApi]</span><br><span class="line">public interface IApplicationService:IDynamicWebApi</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在WebApi Host项目中，Startup里配置动态WebApi：</p><p>Startup.cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 添加动态WebApi 需放在 AddMvc 之后</span><br><span class="line">services.AddDynamicWebApi();</span><br></pre></td></tr></table></figure><p>然后打开浏览器访问将会看到：</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>可以看到成功为我们的 StudentAppService 生成了WebApi，并且和Swagger完美兼容。</p><h3 id="四、详细介绍"><a href="#四、详细介绍" class="headerlink" title="四、详细介绍"></a>四、详细介绍</h3><p>经过上面的介绍，大家应该可以看出使用是非常简单的，只需两步：</p><p>第一步：为你的类（或者该类的接口、该类继承的抽象类，不得放在该类除前面两种情况的父类上）继承 IDynamicWebApi接口并加入特性<strong>[DynamicWebApi]</strong></p><p>第二步：Startup中注册</p><p>因为需要MVC的一些类来进行处理，所以必须放在AddMvc之后，本组件有检查。</p><h6 id="1、规则"><a href="#1、规则" class="headerlink" title="1、规则"></a>1、规则</h6><p>本组件采用约定大于配置，所以在实际使用中有几个规则：</p><p>（1）要让类生成动态API需要满足两个条件，一个是该类直接或间接实现 <strong>IDynamicWebApi</strong>，同时该类本身或者父抽象类或者实现的接口具有特性 <strong>DynamicWebApi</strong>。</p><p>（2）添加特性 <strong>[NonDynamicWebApi]</strong> 可使一个类或者一个方法不生成API，<strong>[NonDynamicWebApi]</strong> 具有最高的优先级。</p><p>（3）会对符合规则的动态API类名进行后缀的删除，如：我们前面的 StudentAppService，会被删除 AppService 后缀，这个规则是可以动态配置的。</p><p>（4）会自动添加<strong>API</strong>路由前缀，默认会为所有API添加 api前缀。</p><p>（5）默认的HTTP动词为<strong>POST</strong>，可以通过 HttpGet/HttpPost/HttpDelete等等ASP.NET Core 内置特性来覆盖。</p><p>（6）可以通过<strong>HttpGet/HttpPost/HttpDelete</strong>等内置特性来覆盖默认路由。</p><p>（7）默认会根据你的方法名字来设置HTTP动词，如 CreateApple 或者 Create 生成的API动词为 POST，对照表如下，若命中（忽略大小写）对照表那么该API的名称中的这个动词将会被省略，如 CreateApple 将会变成 Apple，如未在以下对照表中，将会使用默认动词 POST。</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>（8）强烈建议方法名称使用帕斯卡命名（PascalCase）规范，以更好的自动处理API名称，且使用以上对照表的动词。如:</p><pre><code>添加苹果 -&gt; Add/AddApple/Create/CreateApple更新苹果 -&gt; Update/UpdateApple...</code></pre><p>（9）[DynamicWebApi] 特性因为可被继承，所以为了父类被误识别，禁止放在除抽象类、接口以外的父类上。</p><h5 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h5><p>所有的配置均在对象 DynamicWebApiOptions 中，说明如下：</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><h3 id="五、疑难解答"><a href="#五、疑难解答" class="headerlink" title="五、疑难解答"></a>五、疑难解答</h3><p>若遇到问题，可使用 Issues（<a href="https://github.com/dotnetauth/Panda.DynamicWebApi/issues）" target="_blank" rel="noopener">https://github.com/dotnetauth/Panda.DynamicWebApi/issues）</a><br>进行提问。</p><h3 id="六、结束"><a href="#六、结束" class="headerlink" title="六、结束"></a>六、结束</h3><p>开源地址：<a href="https://github.com/dotnetauth/Panda.DynamicWebApi" target="_blank" rel="noopener">https://github.com/dotnetauth/Panda.DynamicWebApi</a> 希望给个 Star 支持一下</p><p>本文Demo地址：<a href="https://github.com/dotnetauth/Panda.DynamicWebApi/tree/master/practice/XiaoChen.StudentManagement" target="_blank" rel="noopener">https://github.com/dotnetauth/Panda.DynamicWebApi/tree/master/practice/XiaoChen.StudentManagement</a></p><p>ABP：<a href="https://github.com/aspnetboilerplate/aspnetboilerplate" target="_blank" rel="noopener">https://github.com/aspnetboilerplate/aspnetboilerplate</a></p><p>【注】转自DotNet公众号</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C# 内存管理</title>
      <link href="/2019/07/30/C-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2019/07/30/C-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="托管内存"><a href="#托管内存" class="headerlink" title="托管内存"></a>托管内存</h2><p>C#语言开发的程序所使用的的内存，称之为托管内存。可以理解为C#专用内存，即当C#程序运行起来，会向电脑内存申请一块专用的内存区，而这块内存区就叫做托管内存。</p><p>在C#语言开发的程序中，我们所生命的变量，不论是常量，还是变量，都在这块内存中。例如，我们声明一个<code>int i</code> 或者是声明一个对象<code>new class</code>，他们都是保存在这块内存中的。这块内存（托管内存），它是自带管理功能的，即它会自己判断你声明的内存还用不用，不用它就给回收了。</p><p>这个管理工具就是<strong>GC（Garbage Collector）</strong>——控制系统垃圾回收器。</p><p><small>参考网址：<br>GC——控制系统垃圾回收器<br><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.gc?redirectedfrom=MSDN&amp;view=netframework-4.8" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/dotnet/api/system.gc?redirectedfrom=MSDN&amp;view=netframework-4.8</a></small></p><p>弱引用 WeakReference<br><a href="https://docs.microsoft.com/en-us/dotnet/api/system.weakreference?redirectedfrom=MSDN&amp;view=netframework-4.7.2" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/dotnet/api/system.weakreference?redirectedfrom=MSDN&amp;view=netframework-4.7.2</a></p><h2 id="非托管内存"><a href="#非托管内存" class="headerlink" title="非托管内存"></a>非托管内存</h2><p>既然，C#语言开发的程序所使用的的内存，都叫托管内存，那么费托管内存自然就是C#程序不直接使用的内存了。</p><p>那么，C#程序不直接使用的内存，有什么用呢？因为，很多语言并不想C#这么优秀，又关门的内存管理机制，比如C++；所以，它们的变量和常量都是存储在非托管内存区的（对于很多语言而言，并没有托管内存和非托管内存的区别，它们只有一个内存，在内存中找个地址，然后存储数据）。</p><p>所以，当我们做项目遇到要和其他语言进行交互时，就要接触非托管内存了，因为很多时候，我们需要从非托管内存中获取一些变量，或者向非托管内存中写入一些数据供其他语言调用。</p><p>因此，从理论上来讲，C#语言对内存的管理是十分复杂的，远大于C++，因为它不仅自己开辟了一块内存专区，同时又兼顾着控制专区外的内存。</p><h2 id="安全代码与非安全代码"><a href="#安全代码与非安全代码" class="headerlink" title="安全代码与非安全代码"></a>安全代码与非安全代码</h2><h3 id="安全代码"><a href="#安全代码" class="headerlink" title="安全代码"></a>安全代码</h3><p>C#的安全代码就是C#日常写的代码，其特点就是代码中声明的变量都在托管内存；而之所以叫安全代码，则是因为内存全部托管给了内存管理器，理论上不存在内存泄漏的问题（实际情况某些微软的控件还是存在内存泄漏的问题，相信一定有人遇到过，不过99%的情况下是没问题的）。</p><h3 id="非安全代码"><a href="#非安全代码" class="headerlink" title="非安全代码"></a>非安全代码</h3><p>非安全代码显然是与安全代码相对的，即非安全代码的变量所使用的的内存都在非托管内存区。</p><p>因为常规状态下我们写的代码都是安全代码，所以想写非安全代码一定要加个特殊标记，那就是 <strong><code>unsafe</code></strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unsafe</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所述代码，在unsafe的区域内，我们就可以编写非安全代码。</p><p>但C#项目在默认的情况下是不支持非安全代码的，即当我们尝试写unsafe时，编译器会报错。</p><p>想启用C#的非安全代码设置也很简单，右键项目—属性—生成，勾选<strong>【允许不安全代码】</strong>选项。</p><p>那么，在unsafe区间如何控制非托管区域的内存呢? 这里就需要使用到指针了，下面我们看一下C#中的指针功能。</p><p><strong>【注意】</strong>非安全代码并不是C#的主要功能，而是为了兼容其他使用非托管内存的语言而存在的，所以即便你不了解也并不会影响你的技术水平，但在职场中，这块的内容非常容易成为菜鸟攻击你的利器，所以学会它是职场生存的重要手段之一。</p><h4 id="指针（Pointer）与句柄（IntPtr）"><a href="#指针（Pointer）与句柄（IntPtr）" class="headerlink" title="指针（Pointer）与句柄（IntPtr）"></a>指针（Pointer）与句柄（IntPtr）</h4><p>作为C#开发，我们要知道【宏】和指针会严重扰乱代码的脉络，在开发中一定要尽量避免使用。比如你定义了一个Void*的指针，那Void*到底是个什么东西呢？没人知道，因为它什么都能指向，很明显这严重影响了代码的正常阅读，因为当我读到Void*的时候还得调查下它是个什么含义，简直太荒唐了。</p><p>但是在职场中，这些我们要尽量避免使用的东西，确实最经常被谈论的知识点，因为现在任何大学都会教C语言，所以，不论你的同事是程序员还是非技术人员，他们都多少听过指针，并且【不会指针就不能算好程序员】几乎已经是一个职场准则了。因此，尽管C#开发不用这部分内容，也一定要了解起来，不能授人以柄嘛。</p><h4 id="指针（Pointer）"><a href="#指针（Pointer）" class="headerlink" title="指针（Pointer）"></a>指针（Pointer）</h4><p>指针简单来说就是指向一块呢存的内存，我们可以通过指针指向的内存地址找到变量的值，并且改变它。</p><p>在C#中我们也是可以定义指针的，不过那需要在非安全代码内定义。因为指针直接从内存中获取地址，也就是说，它并不是通过C#的内存管理工具来开辟内存的。所以，指针申请的这块内存并不在托管代码的内存区中，很自然的这块内存就是在非托管代码的内存区中了。</p><p>下面我们先看一段代码，来了解一下指针：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">string str = &quot;I am Kiba518!&quot;;</span><br><span class="line">int strlen = str.Length;</span><br><span class="line">IntPtr sptr = MarshalHelper.StringToIntPtr(str);</span><br><span class="line">unsafe</span><br><span class="line">&#123;</span><br><span class="line">    char* src = (char*)sptr.ToPointer();</span><br><span class="line">    //Console.WriteLine(&quot;地址&quot; + (&amp;src)); //这样写会报错，C#并不支持这样取指针地址</span><br><span class="line">    for (int i = 0; i &lt;= strlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(src[i]);</span><br><span class="line">        src[i] = &apos;0&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine(&quot;========不安全代码改值=========&quot;);</span><br><span class="line">    for (int i = 0; i &lt;= strlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(src[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p>上述代码非常简单，我们先将字符串发送给MarshalHelper帮助类转换成句柄（MarshalHelper中会开辟一个非托管区内存空间，然后把托管区的字符串str的值赋值到这个非托管区内存，再生成一个指针指向这块内存，最后再将这个指针转换成IntPtr句柄，当然描述起来很复杂其实也就一句话Marshal.StringToHGlobalAnsi(str)），然后调用转换出来的句柄的ToPointer方法获取到指针，接着在非安全代码区域使用指针输出它的内容，再修改它的值，最后将修改后值的指针内容打印出来。</p><p><strong>PS</strong>：代码中的MarshalHelper是我封装的一个类，用于处理类型与IntPtr的转换，下方github中有该类的代码。</p><p>其实指针在C#中有意义的功能就只剩下内存偏移量调整了，但实际开发中，C#项目是不需要做内存偏移量调整这种操作的。所以，纯C#项目几乎可以说已经弃用指针了。</p><h4 id="句柄（IntPtr）"><a href="#句柄（IntPtr）" class="headerlink" title="句柄（IntPtr）"></a>句柄（IntPtr）</h4><p>句柄其实是一个指针的封装，同样的它也不常用，因为C#项目中指针都被弃用了，那指针的封装—句柄自然也被弃用了。</p><p>但总有特殊的地方会用到指针，比如调用C++动态库之类的。所以微软贴心的为我们做了个句柄，毕竟指针用起来太难受了。</p><p>句柄是一个结构体，简单的来说它是指针的一个封装，是C#中指针的替代者，下面我们看下句柄的定义。</p><p><img src="/images/pasted-1.png" alt="upload successful"></p><p>从图中可以看出，句柄IntPtrt里包含创建指针，获取指针长度，设置偏移量等等方法，并且为了编码方便还声明了些强制转换的方法。</p><p>看了句柄的结构体定义，相信稍微有点基础的人已经明白了，在C#中，微软是希望抛弃指针而改用更优秀的句柄代替它的。 但我们还会发现，局病例提供一个方法叫ToPointer()，它的返回类型是Void*，也就是说我们还可以从句并中拿到C++中的指针。虽然微软期望在C#中不要使用指针，但是在项目开发中总是会有极端特殊的情况，比如有一段C++写的非常复杂完美的函数，而将这个函数转换成C#又及其耗时，那么最简单省力的方法就是直接在C#里启用指针进行移植。</p><p>所以，C#支持指针，其实是为了体现它的兼容性，并不提倡去使用指针。</p><h4 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h4><p>我们先看如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    int retNoFree = Int32ToIntPtr_NoFree();</span><br><span class="line">    IntPtr retNoFreeIP = new IntPtr(retNoFree);</span><br><span class="line">    int retFree = Int32ToIntPtr_Free();</span><br><span class="line">    IntPtr retFreeIP = new IntPtr(retFree);</span><br><span class="line">    new Task(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        int afterNoFree = MarshalHelper.IntPtrToInt32(retNoFreeIP);</span><br><span class="line">        Console.WriteLine(&quot;Int32ToIntPtr_NoFree-未释放Intptr的线程取值&quot; + afterNoFree);</span><br><span class="line">        int afterFree = MarshalHelper.IntPtrToInt32(retFreeIP);</span><br><span class="line">        Console.WriteLine(&quot;Int32ToIntPtr_Free-已释放Intptr的线程取值&quot; + afterFree);</span><br><span class="line">    &#125;).Start();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line">static int Int32ToIntPtr_Free()</span><br><span class="line">&#123;</span><br><span class="line">    IntPtr pointerInt = new IntPtr();</span><br><span class="line">    int testint = 518;</span><br><span class="line">    pointerInt = MarshalHelper.Int32ToIntPtr(testint);</span><br><span class="line">    int testintT = MarshalHelper.IntPtrToInt32(pointerInt);</span><br><span class="line">    Console.WriteLine(&quot;Int32ToIntPtr_Free-取IntPtr的值&quot; + testintT);</span><br><span class="line">    MarshalHelper.Free(pointerInt);</span><br><span class="line">    int testintT2 = (int)pointerInt;</span><br><span class="line">    return testintT2;</span><br><span class="line">&#125;</span><br><span class="line">static int Int32ToIntPtr_NoFree()</span><br><span class="line">&#123;</span><br><span class="line">    IntPtr pointerInt = new IntPtr();</span><br><span class="line">    int testint = 518;</span><br><span class="line">    pointerInt = MarshalHelper.Int32ToIntPtr(testint);</span><br><span class="line">    int testintT = MarshalHelper.IntPtrToInt32(pointerInt);</span><br><span class="line">    Console.WriteLine(&quot;Int32ToIntPtr_NoFree-取IntPtr的值&quot; + testintT);</span><br><span class="line">    int testintT2 = (int)pointerInt;</span><br><span class="line">    return testintT2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中有两个函数Int32ToIntPtr_Free和I哪天ToIntPtr_NoFree，两个函数都是将变量testint转换成指针，然后返回该指针的地址（int类型），区别是一个调用了MarshalHelper.Free(pointerInt)进行指针内存释放，一个没有调用。两个函数执行完成后，开启线程，通过其返回的指针的地址，再重新查找指针对应的内容，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Int32ToIntPtr_NoFree-取IntPtr的值518</span><br><span class="line">Int32ToIntPtr_Free-取IntPtr的值518</span><br><span class="line">Int32ToIntPtr_NotFree-未释放Intptr的线程取值518</span><br><span class="line">Int32ToIntPtr_Free-已释放Intptr的线程取值1448901303</span><br></pre></td></tr></table></figure><p>从上述结果我们可以看出，未进行Free的IntPtr，仍然可以通过指针地址获取到它的内容， 而已释放的IntPtr，通过地址再获取内容，则已经是其他内容了。</p><p>PS: 在C#中指针的内存释放需要 Marshal.FreeHGlobal(IntPtr) 方法，同样的我将其封装到了MarshalHelper中了。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>在职场，我们要防备的通常不是高手，而是菜鸟，所以我们必须要增加各种各样的只是储备来应对这些奇奇怪怪的事情。到此，对C#内存管理的基本讲解就结束了。</p><p>代码已经上传到Github上了，地址： <a href="https://github.com/kiba518/MarshalHelper" target="_blank" rel="noopener">https://github.com/kiba518/MarshalHelper</a></p><p>[注]转自DotNET公众号</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/29/hello-world/"/>
      <url>/2019/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
